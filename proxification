#!/system/bin/sh
pkill dnsmasq
# Clear existing iptables rules
iptables -t nat -F
iptables -t nat -X

# Create a new chain
iptables -t nat -N PROXY
iptables -t nat -I OUTPUT -j PROXY

# Exclude local and reserved IP ranges from redirection
iptables -t nat -A PROXY -d 127.0.0.0/8 -j RETURN
iptables -t nat -A PROXY -d 192.168.0.0/16 -j RETURN
iptables -t nat -A PROXY -d 0.0.0.0/8 -j RETURN
iptables -t nat -A PROXY -d 10.0.0.0/8 -j RETURN
iptables -t nat -A PROXY -d 169.254.0.0/16 -j RETURN
iptables -t nat -A PROXY -d 172.16.0.0/12 -j RETURN
iptables -t nat -A PROXY -d 224.0.0.0/4 -j RETURN
iptables -t nat -A PROXY -d 240.0.0.0/4 -j RETURN

# Redirect all TCP traffic to the SOCKS proxy
iptables -t nat -A PROXY -p tcp -j REDIRECT --to-ports 8123

# Redirect DNS traffic to local DNS resolver (adjust the IP and port)
iptables -t nat -A PROXY -p udp --dport 53 -j DNAT --to-destination 127.0.0.1:53
iptables -t nat -A PROXY -p tcp --dport 53 -j DNAT --to-destination 127.0.0.1:53

# Enable Wi-Fi tethering (you may need to adapt this part based on your device's tethering settings)

svc wifi enable

trap "iptables -t nat -D OUTPUT -j PROXY; iptables -t nat -F PROXY; iptables -t nat -X PROXY" EXIT


screen -Amds nohup dns2socks 127.0.0.1:1080 1.1.1.1:53  > /dev/null & sleep 5 & redsocksv -c redsocks.conf 
